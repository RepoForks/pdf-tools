apply plugin: 'java'

apply plugin: 'launch4j'

apply plugin: 'checkstyle'
apply plugin: 'findbugs'
apply plugin: 'pmd'
apply plugin: 'jacoco'

sourceCompatibility = 1.7

ext {
    mainClass = 'com.aha.pdftools.gui.PermissionManager'
}

///////////////////////////////////////////////////
// Launch4j

ext {
    jarName = project.tasks[JavaPlugin.JAR_TASK_NAME].outputs.files.getSingleFile().name
}

launch4j {
    mainClassName = mainClass
    launch4jCmd = '../../lib/launch4j/launch4j'
    dontWrapJar = true
    jar = jarName
}

copyL4jLib.doLast {
    String destDir = buildDir.path + '/' + launch4j.outputDir
    String srcFile = destDir + '/lib/' + jarName
    copy {
        from srcFile
        into destDir
        fileMode = 0755
    }
    delete {
        srcFile
    }
}

buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath 'edu.sc.seis.gradle:launch4j:1.0.6'
    }
}

///////////////////////////////////////////////////
// Dependencies

repositories {
    mavenCentral()
}

dependencies{
    compile 'com.itextpdf:itextpdf:5.4.5'
    compile 'org.bouncycastle:bcprov-jdk15on:1.50'
    compile 'com.jgoodies:jgoodies-binding:2.10.0'
    compile 'org.slf4j:slf4j-api:1.7.7'
    compile 'com.google.code.findbugs:jsr305:2.0.3'

    runtime 'org.slf4j:slf4j-jdk14:1.7.7'

    testCompile 'junit:junit:4.11'
    testCompile 'org.hamcrest:hamcrest-library:1.3'
    testCompile 'pl.pragmatists:JUnitParams:0.5.0'
}

///////////////////////////////////////////////////
// Code Quality

findbugs {
    ignoreFailures = true
    toolVersion = '2.0.3'
}

if (!rootProject.hasProperty("findbugsReportXml") || findbugsReportXml != 'true') {
    tasks.withType(FindBugs) {
        reports {
            xml.enabled = false
            html.enabled = true
        }
    }
}

pmd {
    ignoreFailures = true
    toolVersion = '5.0.5'
}

checkstyle {
    ignoreFailures = true
    toolVersion = '5.7'
}

///////////////////////////////////////////////////
// jacoco

jacoco {
    toolVersion = '0.7.0.201403182114'
}
jacocoTestReport.dependsOn(test)

///////////////////////////////////////////////////
// About

String gitVersion() {
    new ByteArrayOutputStream().withStream { os ->
        def result = exec {
            executable = 'git'
            args = ['describe', '--abbrev=6']
            standardOutput = os
        }
        return os.toString().trim()
    }
}

task setVersion {
    ext.version = gitVersion()
    ext.destFile = file('doc/version.rst')
    outputs.file destFile
    destFile.write('.. |version-nr| replace:: ' + version)
}

task aboutPage(type:Exec, dependsOn:setVersion) {
    ext.srcFile = 'doc/about.rst'
    ext.destFile = 'src/main/resources/com/aha/pdftools/gui/about.html'
    inputs.files srcFile, 'doc/license.rst', 'doc/about.css', 'doc/html4css1.css', 'doc/version.rst'
    outputs.file destFile

    commandLine 'rst2html', '--no-xml-declaration', '--stylesheet=doc/html4css1.css,doc/about.css', srcFile, destFile
}

processResources.dependsOn aboutPage

///////////////////////////////////////////////////
// Packaging

String manifestClassPath(FileCollection cp) {
    def cpManifest = ''
    cp.each {
        File file ->
            cpManifest += ' lib/' + file.name
    }
    return cpManifest.substring(1)
}

jar {
    manifest {
        attributes 'Version': setVersion.version
        def buildTag = System.getenv()['BUILD_TAG']
        if (buildTag != null && !buildTag.isEmpty()) {
            attributes 'Build-Tag': buildTag
        }
        attributes 'Main-Class': mainClass, 
                   'Class-Path': manifestClassPath(sourceSets.main.runtimeClasspath)
    }
}

task distZip(type: Zip, dependsOn: [setVersion, 'launch4j']) {
    description 'Bundles the project as a JVM application with libs and the launch4j .exe'
    archiveName = project.name + '-v' + setVersion.version + '.zip'
    destinationDir = buildDir
    excludes = [launch4j.xmlFileName]
    from(buildDir.path + '/' + launch4j.outputDir)
    into project.name
}

///////////////////////////////////////////////////////
// Run Application

task run(type: JavaExec) {
    description 'Runs this project as a JVM application'
    classpath = sourceSets.main.runtimeClasspath
    main = mainClass
}

///////////////////////////////////////////////////////
// Wrapper

task wrapper(type: Wrapper) {
    description 'Updates the Gradle wrapper'
    gradleVersion = '1.12'
}
